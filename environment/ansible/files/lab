#!/usr/bin/env python3
"""
Helper script for finding and running labs
"""

import argparse
import os
import re
import subprocess
import sys

TEST_PATH = ""


def get_labs():
    "Get a list of existing lab filenames"
    labs = set()
    lab_pattern = re.compile(r"lab-(\d+)-")
    for filename in get_test_files():
        result = lab_pattern.search(filename)

        if not result:
            continue

        lab = int(result.group(1))
        labs.add(lab)

    if not labs:
        print("No lab tests found")
        sys.exit(1)

    return list(labs)


def get_lab_test(lab):
    "Get test files for one particular lab"
    tasks = []
    for filename in get_test_files():
        if filename.startswith(f"lab-{lab}"):
            tasks.append(os.path.join(TEST_PATH, filename))
    return tasks


def get_test_files():
    "Get test files from the test folder"
    try:
        return os.listdir(TEST_PATH)
    except FileNotFoundError:
        print("Test folder not found. Are you in the labs directory?")
        sys.exit(1)


def run_single_check(lab, verbose):
    "Check a single lab"

    tasks = get_lab_test(lab)

    print(f"Checking lab {lab}\n")

    if not tasks:
        print(f"No tests defined for lab {lab}")
        sys.exit(1)

    lab_task_pattern = re.compile(fr"lab-{lab}-task-(\d+)-(.+)\.(?:yaml|yml)")
    success_counter = 0

    for task in tasks:
        task_match = lab_task_pattern.search(task)

        if not task_match:
            print(f"Invalid task test name {task}. Contact your instructor!")
            sys.exit(1)

        task_num = task_match.group(1)
        task_name = task_match.group(2)

        print(f"[{task_num}/{len(tasks)}] Checking {task_name}...", end=" ")

        try:
            output = subprocess.check_output(["commander", "test", task])
            if verbose:
                print(output.decode())
        except subprocess.CalledProcessError as err:
            print("\033[1;31mFailure!\033[0m")
            # Give some reasons here if verbose mode enabled
            if verbose:
                print(err.output.decode())
        else:
            print("\033[1;32mSuccess! \033[0m")
            success_counter += 1

    if success_counter == len(tasks):
        print("\033[1;32mAll tasks correct! \033[0m\n")
    else:
        print(
            f"\n\033[1;31mErrors in {len(tasks) - success_counter} "
            f"{'tasks' if len(tasks) - success_counter > 1 else 'task'}\033[0m"
        )


def run_full_check(verbose):
    "Check all labs"
    labs = get_labs()
    for lab in labs:
        run_single_check(lab, verbose)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Lab solution checker")

    parser.add_argument("check", nargs="?", default=None)
    parser.add_argument("--workdir", required=False,
                        default="/labs")
    parser.add_argument("--testpath", required=False, default="./tests")
    parser.add_argument(
        "-v", "--verbose",
        dest="verbose",
        required=False,
        action="store_true",
        default=False
        )
    args = parser.parse_args()

    TEST_PATH = args.testpath
    os.chdir(args.workdir)

    if args.check:
        run_single_check(args.check, args.verbose)
    else:
        run_full_check(args.verbose)
